name: Test & Build

on: [push, pull_request]

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

permissions: write-all

jobs:
  checkLicense:
    name: Validate Unity license
    runs-on: ubuntu-latest
    steps:
      # Check that our Unity License is valid
      - name: Unity - Activate
        uses: game-ci/unity-activate@v2


  runUnityTests:
    needs: [checkLicense]
    name: Run Unity Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      # Checkout our code
      - name: Checkout code
        uses: actions/checkout@v2
      # ------------------
      # THE FOLLOWING IS COPIED FROM https://game.ci/docs/github/getting-started#simple-example
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # END COPIED SECTION
      # ------------------
      # Test in both EditMode & PlayMode
      - name: Unity - Run tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      # Get our results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results
          path: artifacts

  # ------------------
  # THE FOLLOWING IS COPIED FROM https://game.ci/docs/github/builder#complete-example
  buildForAllSupportedPlatforms:
    needs: [runUnityTests]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      # Checkout our code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      # Cache
      - uses: actions/cache@v2
        with:
          path: ./Library
          key: Library-PhunkyPhrogs-Android
          restore-keys: |
            Library-PhunkyPhrogs-
            Library-
      # Build our game
      - name: Unity - Builder
        uses: game-ci/unity-builder@v2.2.0
        with:
          # Platform that the build should target.
          targetPlatform: Android
          # Relative path to the project to be built.
          projectPath: .
          # Name of the build. Should not include a file extension.
          buildName: TestBuild
          # Path where the builds should be stored.
          buildsPath: ./build
      # Save our build
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
  # END COPIED SECTION
  # ------------------
      
